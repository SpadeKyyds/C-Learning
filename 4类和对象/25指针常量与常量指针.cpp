// 浅析指针常量与常量指针

// 1.指针常量（int *const p）本质上是一个常量，该常量为指针类型，指向一个int型数据
// 可以改变指向的数据的值，但不可以改变指针的指向（指针的值）

// 2.常量指针（const int *p 或 int const *p）本质上是一个指针，该指针指向一个常量，常量基本类型为int
// 可以改变指针的值（即指针的指向可以改变），但不可以改变该指针指向的数据的值

// 3.指向常量的指针常量（const int *const p）
// 指针的指向以及指向的值均不可以更改

int main()
{
    int m = 10;
    const int n = 20; // 必须在定义的同时初始化

    const int* ptr1 = &m; // 指针指向的内容不可改变
    int* const ptr2 = &m; // 指针不可以指向其他的地方

    ptr1 = &n; // 正确
    // ptr2 = &n; // 错误，ptr2不能指向其他地方

    // *ptr1 = 3; // 错误，ptr1不能改变指针内容
    *ptr2 = 4; // 正确

    // int *ptr3 = &n; // 错误，常量地址不能初始化普通指针吗，常量地址只能赋值给常量指针
    const int* ptr4 = &n; // 正确，常量地址初始化常量指针

    // int *const ptr5; // 错误，指针常量定义时必须初始化
    // ptr5 = &m; // 错误，指针常量不能在定义后赋值

    const int* const ptr6 = &m; // 指向“常量”的指针常量，具有常量指针和指针常量的特点，指针内容不能改变，也不能指向其他地方，定义同时要进行初始化
    // *ptr6 = 5; // 错误，不能改变指针内容
    // ptr6 = &n; // 错误，不能指向其他地方

    const int* ptr7; // 正确
    ptr7 = &m;       // 正确

    // int *const ptr8 = &n; //错误 常量的地址不能赋值给指针常量 指针常量指向的值可以改变
    // *ptr8 = 8;

    return 0;
}